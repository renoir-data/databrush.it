---
import type { Content as Props } from '~/types';
import Headline from '../ui/Headline.astro';
import WidgetWrapper from '../ui/WidgetWrapper.astro';
import Button from '~/components/ui/Button.astro';
import ItemGrid from '../ui/ItemGrid.astro';
import company from '../../assets/images/use_cases/data_company.jpg';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,
  content = await Astro.slots.render('content'),
  callToAction,
  items = [],
  columns,
  isReversed = false,
  isAfterContent = false,
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper
  id={id}
  isDark={isDark}
  containerClass={`max-w-7xl mx-auto ${isAfterContent ? 'pt-0 md:pt-0 lg:pt-0' : ''} ${classes?.container ?? ''}`}
  bg={bg}
>
  <Headline
    title={title}
    subtitle={subtitle}
    tagline={tagline}
    classes={{
      container: 'max-w-xl sm:mx-auto lg:max-w-2xl',
      title: 'text-4xl md:text-5xl font-bold tracking-tighter mb-4 font-heading',
      subtitle: 'max-w-3xl mx-auto sm:text-center text-xl text-muted dark:text-slate-400',
    }}
  />
  <div class="mx-auto max-w-7xl p-4 md:px-8">
    <div class={`md:flex ${isReversed ? 'md:flex-row-reverse' : ''} md:gap-16`}>
      <div class="md:basis-1/2 self-center">
        {content && <div class="mb-12 text-lg dark:text-slate-400" set:html={content} />}
        {
          callToAction && (
            <div class="mt-[-40px] mb-8 text-primary">
              <Button variant="link" {...callToAction} />
            </div>
          )
        }
        <ItemGrid
          items={items}
          columns={columns}
          defaultIcon="tabler:check"
          classes={{
            container: `gap-y-2 md:gap-y-4`,
            panel: 'max-w-none hover:ring ring-primary-500/70 transition-shadow duration-300 rounded-lg p-4 hover-div',
            title: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2 md:max-xl:text-2xl',
            description: 'text-muted dark:text-slate-400 ml-2 rtl:ml-0 rtl:mr-2 md:max-xl:hidden',
            icon: 'flex h-7 w-7 items-center justify-center rounded-full bg-green-600 dark:bg-green-700 text-gray-50 p-1',
            action: 'text-lg font-medium leading-6 dark:text-white ml-2 rtl:ml-0 rtl:mr-2',
          }}
        />
      </div>
      <div aria-hidden="true" class="mt-10 md:mt-0 md:basis-1/2">
        <div class="relative m-auto max-w-4xl">
          <img id="slideshow" src={company.src} class="w-full h-auto rounded-3xl" alt="team" />
        </div>
      </div>
    </div>
  </div>
</WidgetWrapper>

<style>
  @keyframes fadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
  .fade {
    animation: fadeIn 1s ease;
  }

  @keyframes fadeOut {
    from {
      opacity: 1;
    }
    to {
      opacity: 0;
    }
  }
  .fade-out {
    animation: fadeOut 0.5s ease;
  }
</style>

<script>
  import company from '~/assets/images/use_cases/data_company.jpg';
  import processes from '~/assets/images/use_cases/processes.jpg';
  import value from '~/assets/images/use_cases/datavalue.jpg';

  document.addEventListener("DOMContentLoaded", () => {
    // Array di immagini (usa .src per ottenere il percorso)
    const images = [
      company.src,
      processes.src,
      value.src,
    ];

    let currentIndex = 0;
    let interval;
    const slideshow = document.getElementById("slideshow");

    /**
     * Cambia immagine con animazione:
     * - Applica il fade-out alla vecchia immagine.
     * - Al termine del fade-out, cambia l'immagine e applica il fade-in.
     *
     * @param {number} index - L'indice della nuova immagine.
     */
    function changeImage(index) {
      if (!slideshow) return;

      // Rimuovo eventuali classi di animazione esistenti e applico il fade-out
      slideshow.classList.remove("fade");
      slideshow.classList.add("fade-out");

      // Quando l'animazione di fade-out termina, cambio immagine e avvio il fade-in
      slideshow.addEventListener("animationend", function handleFadeOut(e) {
        // Verifico che sia terminata l'animazione di fade-out
        if (e.animationName !== "fadeOut") return;
        slideshow.classList.remove("fade-out");

        // Cambio l'immagine e aggiorno l'indice corrente
        (slideshow as HTMLImageElement).src = images[index];
        currentIndex = index;

        // Forzo il reflow (opzionale, per essere sicuri che il browser rilevi la modifica)
        void slideshow.offsetWidth;

        // Avvio il fade-in
        slideshow.classList.add("fade");

        // Al termine del fade-in, rimuovo la classe per evitare conflitti
        slideshow.addEventListener("animationend", function handleFadeIn(e) {
          if (e.animationName !== "fadeIn") return;
          slideshow.classList.remove("fade");
        }, { once: true });
      }, { once: true });
    }

    /**
     * Avvia lo slideshow automaticamente.
     * L'intervallo Ã¨ impostato a 4000ms per dare tempo al fade-out (2s) e al fade-in (2s).
     */
    function startSlideshow() {
      clearInterval(interval);
      interval = setInterval(() => {
        const nextIndex = (currentIndex + 1) % images.length;
        changeImage(nextIndex);
      }, 4000);
    }

    /**
     * Ferma lo slideshow.
     */
    function stopSlideshow() {
      clearInterval(interval);
    }

    // Avvio dello slideshow all'entrata nel DOM
    startSlideshow();

    // Aggiungo gli event listener per i div con la classe "hover-div"
    document.querySelectorAll(".hover-div").forEach((div, index) => {
      div.addEventListener("mouseenter", () => {
        stopSlideshow();
        changeImage(index);
      });
      div.addEventListener("mouseover", () => {
        stopSlideshow();
      });
      div.addEventListener("mouseout", () => {
        startSlideshow();
      });
    });
  });
</script>
