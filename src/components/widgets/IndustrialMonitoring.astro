---

import Image from '~/components/common/Image.astro';

import renoir from "~/assets/images/Renoir.png";
---

<!-- Load the Lordicon script required for the animated icons -->
<script src="https://cdn.lordicon.com/lordicon.js"></script>


<div class="monitoring-wrapper">
  <svg id="monitoring-svg-container" class="absolute w-full h-full pointer-events-none"></svg>

  <div class="w-full max-w-7xl mx-auto flex items-center justify-between h-full">
    <!-- Sources Panel (Left) -->
    <div class="arch-panel sources-panel">
      <div class="arch-icon" data-icon-id="source1">
        <lord-icon src="https://cdn.lordicon.com/txfzrzvh.json" trigger="loop" delay="1000" colors="primary:#26e9af,secondary:#ffffff" style="width:60px;height:60px"></lord-icon>
        <p>Sensor</p>
      </div>
      <div class="arch-icon" data-icon-id="source2">
        <lord-icon src="https://cdn.lordicon.com/wsaaegar.json" trigger="loop" delay="1500" colors="primary:#26e9af,secondary:#ffffff" style="width:60px;height:60px"></lord-icon>
        <p>Camera</p>
      </div>
      <div class="arch-icon" data-icon-id="source3">
        <lord-icon src="https://cdn.lordicon.com/ipnwkgdy.json" trigger="loop" delay="2000" colors="primary:#26e9af,secondary:#ffffff" style="width:60px;height:60px"></lord-icon>
        <p>Production Line</p>
      </div>
    </div>

    <!-- Center Panel -->
    <div class="center-column">
      <div class="arch-panel third-parties-panel">
        <div class="arch-icon" data-icon-id="third1">
          <lord-icon src="https://cdn.lordicon.com/ggnoyhfp.json" trigger="loop" delay="500" colors="primary:#af4ad4,secondary:#26e9af" style="width:60px;height:60px"></lord-icon>
          <p>Pattern Matching</p>
        </div>
      </div>
      <!-- --- FIX: Changed Renoir logo to a pill shape with text --- -->
      <div class="arch-icon arch-panel renoir-panel" data-icon-id="renoir">
        <div class="renoir-logo-box">
          <Image src={renoir} alt="Renoir Logo" width={40} height={40} class="w-10 h-10 mr-3" />
        </div>
      </div>
      <div class="opacity-0 h-1/3"></div>
    </div>

    <!-- Results Panel (Right) -->
    <div class="arch-panel results-panel">
      <div class="arch-icon" data-icon-id="result1">
        <lord-icon src="https://cdn.lordicon.com/lbcxnxti.json" trigger="loop" delay="2500" colors="primary:#af4ad4,secondary:#ffffff" style="width:60px;height:60px"></lord-icon>
        <p>Dashboard</p>
      </div>
      <div class="arch-icon" data-icon-id="result2">
        <lord-icon src="https://cdn.lordicon.com/lltgvngb.json" trigger="loop" delay="3000" colors="primary:#af4ad4,secondary:#ffffff" style="width:60px;height:60px"></lord-icon>
        <p>Alarm</p>
      </div>
    </div>
  </div>
</div>

<style>

/* Replace the existing connector styles with these */
.connector-dotted-line {
  fill: none;
  stroke-width: 2px;
  stroke-dasharray: 8 12; /* Creates dotted pattern */
  stroke-linecap: round;
}

@keyframes draw-dotted-line {
  from {
    stroke-dashoffset: var(--line-length);
    opacity: 0;
  }
  to {
    stroke-dashoffset: 0;
    opacity: 1;
  }
}

/* Flowing animation for the dots */
@keyframes flow-dots {
  0% {
    stroke-dashoffset: 0;
  }
  100% {
    stroke-dashoffset: -20; /* Negative value makes dots flow forward */
  }
}

/* Apply flowing animation after drawing is complete */
.connector-dotted-line.flowing {
  animation: flow-dots 3s linear infinite;
}

  .monitoring-wrapper {
    --color-logo: #26e9af;
    --color-renoir: #af4ad4;
    --color-bg: #111827;

    position: relative;
    width: 100%;
    max-width: 750px; /* Increased size */
    height: 500px; /* Increased size */
    margin: 2rem auto;
    background-color: #262335;
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    box-shadow: rgba(0, 0, 0, 0.45) 0px 25px 20px -20px;
    overflow: hidden;
    display: none;
    align-items: center;
    justify-content: center;
    font-family: system-ui, sans-serif;
    color: white;
  }

  .center-column {
    width: 40%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-between;
    height: 100%;
    padding: 2.5rem 0;
  }
  
  .arch-panel {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: space-around;
    opacity: 0;
    transform: translateY(20px);
    transition: opacity 0.6s ease-out, transform 0.6s ease-out;
  }

  .sources-panel, .results-panel {
    width: 30%;
    height: 100%;
    padding: 2.5rem 0;
    gap: 1rem;
  }
  .third-parties-panel {
    height: 33.33%;
    justify-content: center;
  }
  .renoir-panel {
    justify-content: center;
  }

  .monitoring-wrapper.active .renoir-panel { transition-delay: 0.1s; opacity: 1; transform: translateY(0); }
  .monitoring-wrapper.active .sources-panel { transition-delay: 0.2s; opacity: 1; transform: translateY(0); }
  .monitoring-wrapper.active .results-panel { transition-delay: 0.3s; opacity: 1; transform: translateY(0); }
  .monitoring-wrapper.active .third-parties-panel { transition-delay: 0.4s; opacity: 1; transform: translateY(0); }
  .monitoring-wrapper.active .arch-title { transition-delay: 0.5s; opacity: 1; transform: translateY(0); }

  .arch-icon { text-align: center; }
  .arch-icon p { margin-top: 0.5rem; font-size: 0.9rem; }
  
  /* --- FIX: Resized and repositioned title to match new design --- */
  .arch-title {
    position: absolute;
    bottom: 3rem;
    left: 50%;
    transform: translateX(-50%) translateY(0);
    font-size: 3rem; /* text-5xl */
    font-weight: 600;
    line-height: 1.1;
    text-align: center;
    text-shadow: 0 0 25px #262335, 0 0 35px #262335;
  }

  @keyframes renoirBoxGlow {
    0% { box-shadow: 0 0 6px 1px rgba(175, 74, 212, 0.4); }
    50% { box-shadow: 0 0 16px 5px rgba(175, 74, 212, 0.7); }
    100% { box-shadow: 0 0 6px 1px rgba(175, 74, 212, 0.4); }
  }

  /* --- FIX: Styled the central Renoir element as a pill --- */
  .renoir-logo-box {
    position: relative;
    display: flex;
    align-items: center;
    border-radius: 9999px;
    padding: 0.5rem 1.5rem 0.5rem 1rem;
    animation: renoirBoxGlow 4s ease-in-out infinite;
    background-color: #262335; /* Add bg to sit on top of connectors */
    border: 1px solid rgba(175, 74, 212, 0.5);
  }
  .renoir-text {
    font-size: 1.125rem;
    font-weight: 500;
    margin: 0;
  }

  /* --- FIX: New animation for drawing the connector outlines --- */
  @keyframes draw-line {
    to { stroke-dashoffset: 0; }
  }

  .connector-channel-fill {
    fill: #000;
    opacity: 0;
    animation: fade-in 0.5s ease forwards;
  }
  
  .connector-channel-outline {
    fill: none;
    stroke-width: 2px;
    /* --- JS will set dasharray and dashoffset dynamically --- */
    animation: draw-line 1.5s ease-out forwards;
  }
  
  .connector-line {
      fill: none;
      stroke-width: 2px;
      animation: draw-line 1s ease-out forwards;
  }

  @keyframes fade-in {
    to { opacity: 1; }
  }
</style>

<script>
function drawConnectors() {
  const wrapper = document.querySelector('.monitoring-wrapper');
  const svg = document.getElementById('monitoring-svg-container');
  if (!wrapper || !svg || !wrapper.classList.contains('active')) return;
  
  svg.innerHTML = '';
  const containerRect = svg.getBoundingClientRect();
  
  const iconRects = {};
  wrapper.querySelectorAll('.arch-icon[data-icon-id]').forEach((icon) => {
    iconRects[icon.dataset.iconId] = icon.getBoundingClientRect();
  });

  const renoirRect = iconRects['renoir'];
  if (!renoirRect || renoirRect.width === 0) return;

  // Helper to create animated dotted lines
  const createDottedLine = (d, color, delay) => {
    const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');
    path.setAttribute('d', d);
    path.setAttribute('class', 'connector-dotted-line');
    path.style.stroke = color;
    path.style.strokeWidth = '2px';
    path.style.fill = 'none';
    path.style.strokeDasharray = '8 12'; // Creates dotted effect
    path.style.animationDelay = `${delay}s`;
    
    svg.appendChild(path);
    
    // Set up drawing animation
    const length = path.getTotalLength();
    path.style.strokeDashoffset = length;
    path.style.animation = `draw-dotted-line 2s ease-out forwards`;
    path.style.animationDelay = `${delay}s`;
  };

  // Draw individual lines from each source to Renoir center
  const renoirCenter = { 
    x: renoirRect.left + renoirRect.width/2 - containerRect.left, 
    y: renoirRect.top + renoirRect.height/2 - containerRect.top 
  };

  // Source connections
  ['source1', 'source2', 'source3'].forEach((sourceId, index) => {
    const sourceRect = iconRects[sourceId];
    if (sourceRect) {
      const start = { 
        x: sourceRect.right - containerRect.left, 
        y: sourceRect.top + sourceRect.height/2 - containerRect.top 
      };
      
      // Create curved path to center
      const controlX = start.x + (renoirCenter.x - start.x) * 0.7;
      const d = `M ${start.x} ${start.y} Q ${controlX} ${start.y} ${renoirCenter.x - 30} ${renoirCenter.y}`;
      createDottedLine(d, '#26e9af', 0.2 + index * 0.1);
    }
  });

  // Result connections
  ['result1', 'result2'].forEach((resultId, index) => {
    const resultRect = iconRects[resultId];
    if (resultRect) {
      const end = { 
        x: resultRect.left - containerRect.left, 
        y: resultRect.top + resultRect.height/2 - containerRect.top 
      };
      
      // Create curved path from center
      const controlX = renoirCenter.x + (end.x - renoirCenter.x) * 0.3;
      const d = `M ${renoirCenter.x + 30} ${renoirCenter.y} Q ${controlX} ${end.y} ${end.x} ${end.y}`;
      createDottedLine(d, '#af4ad4', 0.6 + index * 0.1);
    }
  });

  // Third party connection (vertical line from Pattern Matching)
  const thirdRect = iconRects['third1'];
  if (thirdRect) {
    const start = { 
      x: thirdRect.left + thirdRect.width/2 - containerRect.left, 
      y: thirdRect.bottom - containerRect.top 
    };
    const d = `M ${start.x} ${start.y} L ${renoirCenter.x} ${renoirCenter.y - 30}`;
    createDottedLine(d, '#af4ad4', 0.5);
  }
}

  const observer = new MutationObserver((mutationsList) => {
    for (const mutation of mutationsList) {
      if (mutation.type === 'attributes' && mutation.attributeName === 'class') {
        const targetElement = mutation.target;
        if (targetElement.classList.contains('active')) {
          setTimeout(drawConnectors, 600); // Wait for panel animations
          window.addEventListener('resize', drawConnectors);
          observer.disconnect();
        }
      }
    }
  });

  const wrapperElement = document.querySelector('.monitoring-wrapper');
  if (wrapperElement) {
    observer.observe(wrapperElement, { attributes: true });
  }
</script>